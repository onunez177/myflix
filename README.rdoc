== MyFlix

MyFlix is a non-trivial production quality clone of Netflix. The UI was provided
by the instructors at Tealeaf Academy (http://www.gotealeaf.com) I developed the entire 
backend of the app and deployed it via Heroku to http://ps-myflix.herokuapp.com.

Key features of the MyFlix application:

== Agile Development
The entire application was built from the ground up using Agile Development
processes such as iterative design and TDD.

The application features a full test suite, testing all aspects of the application.
Tools that were used in developing the test suite:

- `RSpec`: the backbone of the testing suite.
- `Capybara`: used in conjuction with RSpec to create high-level tests for key business features.
- Selenium Webkit: used to create feature tests that require javascript.
- VCR: used to record http responses when interacting with the Stripe API in our tests, to help speed up the test suite.

== Stripe API integration (e-commerce)
Stripe is suite of APIs that allows developers to integrate e-commerce features
into their apps. Stripe was implemented into MyFlix by creating an API wrapper,
allowing us access the API from anywhere in the site without having to duplicate
code. Some of the key features implemented using Stripe:

- Users must enter credit card information upon registration and can only access the site upon successfully paying an initial subscription fee.
- Integration of webhooks to listen for successful and failed payments.
- Suspension of account services if a customer has failed to make a payment.

Features that are currently scheduled to be tested and developed:
- Users can view their current account status.
- Upon failed payment, users will receive an email with a link to re-activate their account and update credit card information.

== Authentication and Seperation of Actors
Authentication was built from scratch for the MyFlix app. There are two
roles that allow different levels of access to the site, regular users 
and Administrators. Key features:

- If any user ever forgets their password, they can request a password reset email. Each email routes to a unique url via a uniquely generated token on the user model.
- Administrators can add videos to the site and also view the 10 most recent payments made.

Features that are currently scheduled to be developed:
- Administrator can freeze accounts for deliquent behavior.
- Administrator can update and edit a video's information from the dashboard.
- User profile page with personal avatar support and short bios etc.

== Amazon S3
MyFlix uses the Amazon S3 service for hosting of static resources. All
videos and images that are uploaded by Administrator are hosted on Amazon
S3. S3 integration was acheived using the CarrierWave and Fog gems.

== Background Jobs
To reduce server load, MyFlix off-loads all email sending to background jobs
using Redis to-go and the Sidekiq gem.

== OOP Design
Some of the key features of MyFlix have been re-factored or are currently being
refatored into a more OOP design. For example:

- Decorators are currently being implemented to serve view templates. This is an
on going refactor at this time.
- Service objects have been implemented for user registration to create a much
more maintainable code base for a key business process.

== Javascript and Ajax
JS and Ajax are slowly being rolled out to improve the UX of MyFlix. Currently
only a few small features use this functionality, and are all works in progress:

- The search button for MyFlix is disabled unless the user fills in the search field.
- User can add a video to their queue while watching a movie without interruption of video playback.

Currently scheduled for implementation:
- Ajax call/update on review section on the video player page.

- AJAXify video player. - half done! just need to ajax the review process!
- Add a proper user profile page.
- Finish e-commerce features.
- Feature/Integration Spec for social networking featues. *complete*
- Logic method to make follow button appear/disappear on the people page. *complete*
- Spec for USER model. *complete*
- Need to improve test suites to check more aggressively for fail states. ie. invites controller. *complete*